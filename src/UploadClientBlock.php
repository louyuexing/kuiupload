<?php/** * Created by PhpStorm * Author: K_ui < louyuexing@outlook.com > * Time: 2020/03/31 20:46 */namespace kuiupload;set_time_limit(0);ini_set('max_execution_time',120);date_default_timezone_set('PRC');define('SALT',"salt_@_K_ui");/** * Class UploadClientBlock */class  UploadClientBlock{	/**	 * 切片数据	 * @var string	 */	private $slicedata='';	/**	 * 总分片数	 * @var int	 */	private $count=0;	/**	 * 分片上传开始时间，总用时开始时间	 * @var string	 */	private $begintime,$usetime;	    /**     * 文件上传     * @param $filename     * @param $slicesize     */    public function upload($file,$filename,$slicesize,$upaddrs)    {        $this->begintime=microtime();        $this->usetime=$this->begintime;        $basename=pathinfo($filename)['basename'];        $this->count=ceil(filesize($file)/$slicesize);        $step_No=0;        foreach ($e=$this->sliceFile($file,$slicesize) as $key=>$value)        {            $this->usetime=microtime();            $step_No+=1;            $this->slicedata=$e->current();            $postdata=$this->dataBag($basename,$step_No);            $postdata['data']=$this->slicedata;            $repost=$this->post($upaddrs,$postdata);            $jsondata=json_decode($repost[0],true);            if($repost[1]=='' && $jsondata)            {                if($jsondata['code']=='US_1000' && $jsondata['msg']===true)                {                    $opdata=$jsondata['data']['data'];                    if(isset($opdata['step_No']) && $opdata['step_No'] ==$step_No)                    {                        if($step_No < $this->count)                        {                            $this->printfInfo( 'up ..........',round($step_No/$this->count,2) * 100,'%');                        }else{                            $this->printfInfo( 'up ..........100%  success');                            $this->printfInfo('fname ..........  [ ',$opdata['savefilename'],' ]','totle-time:',round(microtime()-$this->begintime,5));                            exit;                        }                    }else{                        $this->printfInfo( '文件上传顺序错误 [ code=',$jsondata['code'],' msg=',$jsondata['msg'],' step_No_Now=',$step_No,' step_No_Return=',$opdata['step_No'],"]");                        exit;                    }                }else{                    $this->printfInfo( '文件上传失败 [ code=',$jsondata['code'],' msg=',$jsondata['msg'],"]");                    exit;                }            }else{                $this->printfInfo( '文件上传请求失败');                exit;            }        }    }		/**	 * 分块	 * @param $file	 * @param $slicesize	 */	private function sliceFile($file,$slicesize)	{        $fh=fopen($file,'rb');        while ($slicedata=fread($fh,$slicesize)) {			yield $slicedata;		}		fclose($fh);	}	/**	 * 数据构建	 * @param $basename	 * @param $data	 * @param $step_No	 */	private function dataBag($basename,$step_No)	{		$postdata=[			'basename'=>$basename,			'step_No'=>$step_No,			'count_step'=>$this->count,			'size'=>strlen($this->slicedata),			'hash'=>sha1($this->slicedata)		];		ksort($postdata);		$sha1str=SALT;		foreach ($postdata as $k=>$sha1v)		{$sha1str.=$sha1v;}		$postdata['check']=sha1($sha1str);		return $postdata;	}	/**	 * 输出行	 * @param $line	 */	public function printfInfo(...$line)	{		foreach ($line as $key=>$value){            echo $value;        }		$endtime=microtime();		$utime=round($endtime-$this->usetime,5);		echo '  | use_time    [ ',$utime,'  ]',$this->isCli()?PHP_EOL:'<br/>';	}    /**     * @return bool     */	public function isCli()    {        return preg_match("/cli/i", php_sapi_name()) ? true : false;    }    /**     * post 请求     * @param $url     * @param $data     */    private function post($url,$data)    {        $ch=curl_init();        curl_setopt($ch,CURLOPT_URL,$url);        curl_setopt($ch,CURLOPT_POST,true);        curl_setopt($ch,CURLOPT_POSTFIELDS,$data);        curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,false);        curl_setopt($ch,CURLOPT_SSL_VERIFYHOST,false);        curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);        $result=curl_exec($ch);        $error=curl_error($ch);        $info=curl_getinfo($ch);        curl_close($ch);        return [$result,$error,$info];    }}//(function($slicesize,$file,$filename){//    $upaddrs='http://127.0.0.1/php/php_upload/file/UploadServerBlock.php';//    (new UploadClient())->upload($file,$filename,$slicesize,$upaddrs);//})(1 * 1024 * 1024,$_FILES['file']['tmp_name'],$_FILES['file']['name']);